generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String           @id @default(uuid())
  firstName               String
  lastName                String
  fullName                String?
  username                String           @unique @default(cuid())
  email                   String           @unique
  phoneNumber             String?
  nationality             String?
  dateOfBirth             DateTime?
  gender                  Gender?
  role                    Role
  address                 String?
  image                   String?
  info                    String?
  accepted                Boolean          @default(false)
  craetedAt               DateTime         @default(now())
  password                String
  updatedAt               DateTime         @default(now()) @updatedAt
  blogs                   Blog[]
  memberInfo              MemberInfo?
  privateSessionsAsCoach  PrivateSession[] @relation("CoachSessions")
  privateSessionsAsMember PrivateSession[] @relation("MemberSessions")
}

model MemberInfo {
  userId           String             @id @unique
  height           Float
  weight           Float
  plan             String
  startDate        DateTime
  endDate          DateTime
  status           SubscriptionStatus
  subscriptionCost Float
  info             String?
  user             User               @relation(fields: [userId], references: [id])
}

model PrivateSession {
  id               String   @id @default(uuid())
  coachId          String
  memberId         String
  startSessionDate DateTime
  sessionsNumber   Int
  coach            User     @relation("CoachSessions", fields: [coachId], references: [id])
  member           User     @relation("MemberSessions", fields: [memberId], references: [id])
}

model Blog {
  id        String   @id @default(uuid())
  title     String
  content   String
  image     String?
  published Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  authorId  String
  author    User     @relation(fields: [authorId], references: [id])

  @@index([authorId])
}

enum Gender {
  MALE
  FEMALE
}

enum Role {
  ADMIN
  COACH
  MEMBER
}

enum SubscriptionStatus {
  ACTIVE
  UNACTIVE
  EXPIRED
  CANCELLED
}
